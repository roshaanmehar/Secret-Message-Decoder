def decode_secret_message(data):
    # Parse the input data into coordinates and characters
    grid = {}
    max_x = max_y = 0

    for line in data.strip().split("\n"):
        # Extract the x-coordinate, character, and y-coordinate from each line
        parts = line.split()
        if len(parts) == 3:
            try:
                x = int(parts[0])
                char = parts[1]
                y = int(parts[2])
                grid[(x, y)] = char
                max_x = max(max_x, x)
                max_y = max(max_y, y)
            except ValueError:
                continue

    # Build and print the grid with row alignment for better visualization
    result_grid = []
    for y in range(max_y + 1):
        row = ''.join(grid.get((x, y), ' ') for x in range(max_x + 1))
        result_grid.append(row)
    
    # Print the final decoded message
    print("\n".join(result_grid))

# Example input data (replace with the actual input for the problem)
data = """
93 ░ 5
2 ░ 5
8 ░ 0
39 █ 1
64 ░ 0
63 █ 1
84 █ 3
9 █ 4
55 █ 1
23 █ 4
91 █ 5
21 █ 5
79 ░ 1
65 ░ 1
52 █ 5
49 ░ 5
24 ░ 1
42 ░ 5
6 █ 3
24 ░ 2
0 █ 4
65 █ 3
74 ░ 5
36 ░ 6
22 █ 1
62 ░ 3
24 ░ 5
58 █ 5
35 █ 6
55 ░ 3
20 █ 0
88 █ 3
46 █ 6
8 █ 5
13 █ 1
76 █ 4
54 █ 1
2 █ 0
91 █ 4
34 █ 6
80 █ 0
12 █ 5
14 ░ 3
1 █ 2
67 ░ 5
93 ░ 1
48 █ 5
79 █ 0
13 █ 5
39 █ 5
48 ░ 6
12 █ 3
92 █ 5
52 █ 4
55 ░ 2
61 ░ 5
66 █ 4
7 █ 6
83 █ 4
33 █ 0
85 ░ 2
56 ░ 0
32 █ 6
72 █ 5
23 █ 1
40 ░ 3
1 █ 6
28 █ 0
61 █ 2
19 █ 6
63 █ 2
41 ░ 2
77 ░ 3
57 █ 3
26 █ 4
38 █ 3
74 █ 3
84 █ 4
19 █ 0
9 █ 1
39 █ 2
1 █ 3
60 █ 3
28 ░ 2
26 █ 1
14 █ 0
23 █ 5
30 █ 6
18 █ 0
53 █ 2
17 █ 6
4 █ 0
78 ░ 4
29 █ 6
0 █ 5
22 █ 2
59 █ 4
85 ░ 1
2 ░ 1
77 █ 4
53 █ 1
67 █ 6
81 ░ 6
47 █ 5
22 ░ 0
5 █ 0
76 █ 3
43 █ 0
8 █ 2
1 █ 4
60 █ 2
32 █ 0
27 █ 5
15 █ 0
0 █ 6
41 ░ 4
85 ░ 5
84 █ 1
41 █ 6
62 █ 1
63 █ 0
92 █ 2
84 █ 2
42 █ 0
77 █ 5
43 █ 6
66 █ 5
15 █ 6
28 ░ 1
91 █ 0
54 █ 3
71 █ 0
2 █ 3
29 █ 3
73 ░ 0
84 █ 5
83 █ 6
6 █ 0
8 █ 1
26 █ 0
93 ░ 0
47 █ 6
3 █ 3
47 █ 1
84 █ 0
87 █ 3
41 █ 0
16 █ 6
41 █ 5
86 █ 3
4 █ 6
61 █ 4
8 █ 4
62 ░ 4
57 █ 2
60 █ 4
40 █ 2
31 █ 3
76 █ 2
27 █ 2
40 █ 4
70 █ 6
41 █ 1
71 █ 6
68 ░ 6
53 █ 3
45 █ 0
78 ░ 2
10 ░ 4
23 █ 2
48 ░ 0
48 █ 1
12 █ 2
14 █ 6
54 ░ 5
73 █ 1
14 █ 5
40 █ 1
65 █ 5
66 █ 6
70 █ 0
38 █ 4
26 █ 5
26 █ 6
53 ░ 6
10 ░ 5
46 █ 0
90 █ 3
51 █ 5
1 █ 5
8 ░ 3
73 █ 4
52 █ 6
85 █ 3
72 █ 1
64 █ 2
47 █ 0
8 ░ 6
74 ░ 1
31 █ 0
9 █ 2
9 █ 5
72 █ 6
78 █ 5
57 ░ 1
12 █ 1
58 █ 4
92 █ 3
10 ░ 2
58 █ 3
32 █ 3
83 █ 1
79 ░ 5
64 █ 4
21 █ 6
5 █ 6
3 █ 6
24 ░ 3
2 ░ 2
77 █ 2
78 █ 6
34 █ 0
28 █ 3
27 █ 6
56 █ 2
22 █ 5
14 ░ 4
93 ░ 3
30 █ 3
7 █ 3
49 ░ 1
18 █ 6
27 █ 0
15 ░ 1
67 ░ 4
85 ░ 4
66 ░ 3
73 ░ 6
35 █ 0
60 █ 5
72 █ 0
73 █ 5
91 █ 3
36 ░ 0
91 █ 2
64 █ 1
24 ░ 4
74 █ 4
53 █ 5
56 █ 1
59 █ 5
80 █ 6
62 ░ 2
30 █ 0
85 ░ 6
21 █ 1
44 █ 0
75 ░ 4
91 █ 1
44 █ 6
83 █ 5
12 █ 4
51 █ 6
17 █ 0
65 ░ 2
54 █ 0
45 █ 6
0 █ 1
38 █ 2
13 █ 3
91 █ 6
0 █ 2
92 █ 6
92 █ 1
29 █ 0
1 █ 1
92 █ 4
39 █ 3
93 ░ 6
57 █ 4
84 █ 6
26 █ 2
83 █ 0
22 █ 4
34 ░ 3
92 █ 0
65 █ 4
65 █ 6
54 ░ 4
31 █ 6
55 █ 0
4 █ 3
28 █ 6
85 ░ 0
2 █ 6
10 ░ 1
58 ░ 2
0 █ 3
27 █ 4
0 █ 0
52 █ 3
61 █ 1
28 ░ 5
3 █ 0
14 ░ 2
20 █ 6
33 █ 3
2 ░ 4
53 █ 4
22 █ 3
15 ░ 5
54 █ 2
42 ░ 1
6 █ 6
5 █ 3
74 █ 2
93 ░ 4
27 █ 3
77 █ 1
39 █ 4
78 █ 0
62 █ 0
13 █ 2
75 ░ 2
75 █ 3
93 ░ 2
89 █ 3
79 █ 6
64 █ 3
16 █ 0
59 ░ 3
40 █ 5
13 █ 4
83 █ 2
27 █ 1
61 █ 3
28 ░ 4
14 █ 1
42 █ 6
"""

# Call the function with the provided data
decode_secret_message(data)
